//EVENT LIST
Time_System.prototype.initialize_timeEvents_List	= function(data){
	this.all_timeEvents = data;
	this.active_timeEvents = null;
	this.update_timeEvents();
	
};
Time_System.prototype.update_timeEvents = function(){
	this.update_timeEvent_list();
	
	for(i = 0; i < this.active_timeEvents.length; i++){
		console.info("activation");
		this.test_timeEvent(this.active_timeEvents[i]);
	}
};
Time_System.prototype.test_timeEvent = function(event){
	if(this.is_at_time(event.date) && !event.beginned){
		console.info("atTime");
		eval(String(event.onTime));
		$dataEventsList[event.id].beginned = true;
		
	}else if( this.is_at_time(event.timeOut) && !event.tested){
		if(eval(event.success_condi)){
			eval(event.onSuccess);
		}else{
			eval(event.onFail);
		}
		$dataEventsList[event.id].tested = true;
		$dataEventsList[event.id].active = false;
	}
};
Time_System.prototype.update_timeEvent_list		= function(){
	var _src = $dataEventsList || [];
	var _obj = [];
	
	if(_src.length > 0){
	
		for(i = 0; i < _src.length; i++){
			if(this.is_active_event(_src[i])){
				_obj.push(i);
			};
		};
	};
	this.active_timeEvents = this.sort_eventList(_obj);
};
Time_System.prototype.is_active_event 				= function(obj){
	return obj.active
	console.info("active :"+obj.active);
	/*&& this.is_event_after_begin(obj)
	&& this.is_event_before_timeOut(obj)
	&& this.is_varsList_ok(obj.vars_list)
	&& this.is_switches_mandatory_ok(obj.switches_mandatory)
	&& this.is_least_one_switch_ok(obj.switches_list)
	&& this.is_actors_mandatory_ok(obj.actors_mandatory)
	&& this.is_least_one_actor_ok(obj.actors_list)
	&& this.is_least_one_map_ok(obj.maps_list)*/;
};
Time_System.prototype.sort_eventList 				= function(obj){
	if(obj){
		var is_swaped = 1;
		var temp = null;

		while (is_swaped > 0){
			is_swaped = 0;
			for (i = 1; i < obj.length - 1; i++){
				if (isBefore(obj[i],obj[i + 1])){
					temp = obj[i];
					obj[i] = obj[i + 1];
					obj[i + 1] = temp;
					is_swaped++;
				}
			}
		}
		return obj;
	}else{
		return [];
	}
};
Time_System.prototype.is_event_after_begin			= function(obj){
	var _date_obj =this.get_actual_date_obj();
	return this.is_after_time(obj.date, this.get_actual_date_obj())
};
Time_System.prototype.is_event_before_timeOut			= function(obj){
	var _date_obj =this.get_actual_date_obj();
	return this.is_before_time(obj.timeOut, this.get_actual_date_obj())
};
